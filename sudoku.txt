數獨準則
(1) If a square has only one possible value, then eliminate that value from the square's peers. 
(2) If a unit has only one possible place for a value, then put the value there.
----------------------------
def cross(A, B):
    "Cross product of elements in A and elements in B."
    return [a+b for a in A for b in B]

digits   = '123456789'
rows     = 'ABCDEFGHI'
cols     = digits
squares  = cross(rows, cols)
unitlist = ([cross(rows, c) for c in cols] +
            [cross(r, cols) for r in rows] +
            [cross(rs, cs) for rs in ('ABC','DEF','GHI') for cs in ('123','456','789')])
units = dict((s, [u for u in unitlist if s in u]) 
             for s in squares)
peers = dict((s, set(sum(units[s],[]))-set([s]))
             for s in squares)
-----			 
def parse_grid(grid):
    """Convert grid to a dict of possible values, {square: digits}, or
    return False if a contradiction is detected."""
    ## To start, every square can be any digit; then assign values from the grid.
    values = dict((s, digits) for s in squares)
    for s,d in grid_values(grid).items():
        if d in digits and not assign(values, s, d):
            return False ## (Fail if we can't assign d to square s.)
    return values

def grid_values(grid):
    "Convert grid into a dict of {square: char} with '0' or '.' for empties."
    chars = [c for c in grid if c in digits or c in '0.']
    assert len(chars) == 81
    return dict(zip(squares, chars))
----
var digits   = '123456789';
var rows     = 'ABCDEFGHI'
var cols     = digits;
var squares  = cross(rows, cols);

var unitlist = create_unitlist();

function create_unitlist(){
	var tmp = [];
	for(let r of rows){
		tmp.push(cross(r,cols));
	}
	
	for(let r of rows){
		tmp.push(cross(r,cols));
	}
	
	for(let rs of ['ABC','DEF','GHI']){
		for(let cs of ['123','456','789'])
			tmp.push(cross(rs,cs))
	}
				
	return tmp;
}

function cross(A,B){
	var array = [];	
	for(let a of A){
		for(let b of B){
			array.push(a+b)
		}
	}
	return array;
}